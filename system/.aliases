################################################################################
# General aliases
################################################################################

# Include work-related aliases, if the file exists
if [[ -e $HOME/.aliases.work ]]; then
    source "$HOME/.aliases.work"
fi

# Import ANSI escape codes for colors
source "$DOTFILES_LOCATION/_scripts/colors.sh"

# Navigation aliases
alias ls="ls -G"
if command -v eza &> /dev/null
then
    alias ll="eza \
        --all \
        --long \
        --icons=always \
        --header \
        --modified \
        --time-style=relative \
        --context \
        --mounts \
        --no-user \
        --no-git \
        "
else
    alias ll='ls -Ghal'
fi
alias grep="grep --color=auto --ignore-case"
alias mkdir="mkdir -pv"
alias path='echo -e ${PATH//:/\\n}'
alias c="clear"
alias x="clear; tmux clear-history"
alias df='cd $DOTFILES_LOCATION'
alias av='nvim $VIMRC_LOCATION'
alias az='nvim $ZSHRC_LOCATION'
alias aa='nvim $ALIASES_LOCATION'
alias obsidian='cd $OBSIDIAN_LOCATION && nvim .'

# Use neovim by default
alias vi="nvim"
alias v="nvim"
alias vs="nvim -S"      # open neovim with session

# NNN
alias n="nnn"

# tmux
alias tl="tmux ls"
alias ta="tmux attach"
alias tK="tmux kill-server"
function tk() {
    for s in $(tmux list-sessions | awk '{print $1}' | rg ':' -r '' | fzf); do 
        tmux kill-session -t "$s"
    done
}

# Kill background processes (like suspended jobs)
kill-bg() {
    jobs -p | awk '{print $3}' | xargs kill -KILL
}

# System information (neofetch)
alias si="neofetch --uptime_shorthand tiny --memory_percent on --refresh_rate on"

# Restart gpg agent
alias restart-gpg="gpg-connect-agent /bye; gpg-connect-agent killagent /bye; gpgconf --kill gpg-agent; gpg-connect-agent updatestartuptty /bye;"

# Colorize the output of tree
alias tree="tree -C"

# Add syntax highlighting for man pages
function man() {
  env \
    LESS_TERMCAP_md="$(tput bold; tput setaf 4)" \
    LESS_TERMCAP_me="$(tput sgr0)" \
    LESS_TERMCAP_mb="$(tput blink)" \
    LESS_TERMCAP_us="$(tput setaf 2)" \
    LESS_TERMCAP_ue="$(tput sgr0)" \
    LESS_TERMCAP_so="$(tput smso)" \
    LESS_TERMCAP_se="$(tput rmso)" \
    PAGER="${commands[less]:-$PAGER}" \
    man "$@"
}


# Find-in-file  (using ripgrep for searching and FZF for previews)
# usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# Preview files and open the chosen files in nvim
vf() {
  nvim -o "$(fzf --preview 'bat --color=always {}')"
}

# Process monitoring
alias bt="btop"

# Show active IP ports
alias ap="sudo lsof -i -P -n | grep LISTEN"

# Analyze code complexity
acc() {
    echo "npx code-complexity . --limit 20 --sort complexity"
    npx code-complexity . --limit 20 --sort complexity
}

# Update to the latest macOS and fetch the full installer
alias fetch-macos-installer="softwareupdate --fetch-full-installer"

# Shows the external IP address and whois information. Useful over VPNs.
external-ip() {
    GREEN='\033[1;32m'
    IP=$(curl -s ifconfig.me)

    whois "$IP"
    echo "Your external IP is: ${GREEN}${IP}${NC}"
}

# Internet connection speed test shortcuts
sto-servers() {
    echo "Open https://speedtestserver.com/"
}
alias sto-sof="speedtest -vo sp1.neterra.net"
alias sto-ath="speedtest -vo speedtest2.cosmote.net"

# Cool miscellaneous shortcuts
alias plinkplonk='cat $HOME/develop/plink-plonk-cute.js | pbcopy'
weather() {
    combinedurl="v2.wttr.in/$1?m"
    echo "$combinedurl"
    curl "v2.wttr.in/$1?m"
}

# List all homebrew leaves and their dependencies
# Source: https://stackoverflow.com/questions/41029842/easy-way-to-have-homebrew-list-all-package-dependencies
# Sample output:
# awscli: gdbm readline sqlite tcl-tk xz
bl() {
    brew leaves | xargs brew deps --installed --for-each | sed "s/^.*:/$(tput setaf 4)&$(tput sgr0)/"
}

################################################################################
# Git aliases for worktrees workflow
################################################################################
# Clone repository as bare repo for worktree workflow
clone-bare() {
    if [ $# -ne 2 ]; then
        printf "$CYAN%s$NC\n" "Usage: clone-bare <repository-url> <local-repo-path>"
        return 1
    fi

    local repo_url="$1"
    local local_repo_path="$2"

    # Check if target directory exists and has .git
    if [ -e "$local_repo_path/.git" ]; then
        printf "$RED$BOLD%s$NC\n\n" "Aborting: nested repos are not advisable."
        return 1
    fi

    # Create directory if it doesn't exist and it's not the current working directory
    if [ "$local_repo_path" != "." ] && [ ! -d "$local_repo_path" ]; then
        mkdir -p "$local_repo_path"
    fi

    cd "$local_repo_path" || return 1

    printf "$MAGENTA$BOLD%s$NC\n" "Cloning $repo_url as bare repository in $(pwd)"

    # Clone as bare repository
    git clone --bare --filter=blob:none --single-branch "$repo_url" .bare

    # Create .git file pointing to bare repo
    echo "gitdir: ./.bare" > .git

    # Configure remote to fetch all branches (dangerous for massive repos)
    # This is needed for fetching individual branches in the future
    # Do NOT: `git fetch` everything blindly
    # Do: `git fetch origin HEAD`
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

    # # Fetch all branches
    # git fetch --filter=blob:none origin

    # TIP 1: Discover remote branches
    # Do: git ls-remote --heads
    # Don't: git branch -r

    # TIP 2: Fetch changes
    # Do: git fetch origin HEAD
    # Don't: git fetch

    # Remove reference for default branch (we cannot make a worktree for an existing branch ref)
    git branch -D "$(git rev-parse --abbrev-ref HEAD)"

    printf "$GREEN%s$NC%s$BOLD%s$NC\n" " "  " Bare repository has been partially cloned in: " "$local_repo_path"
    printf "$GREEN$BOLD%s$NC\n\n" '  Ready to use worktrees!'
    printf "$YELLOW_BACKGROUND%s$NC\n $YELLOW%s$NC\n\n" " Discover remote branches:" "git ls-remote --heads"
    printf "$CYAN_BACKGROUND%s$NC\n" "  Available commands:"
    printf "$CYAN%s$NC\n" "  gwa <branch-name> - to create a worktree"
    printf "$CYAN%s$NC\n" "  gwl, gws, gwr, gwp "
}

# Git worktree management
alias gwl="git worktree list"
alias gwp="git worktree prune"

# Create new worktree with branch
gwa() {
  if [ $# -eq 0 ]; then
    printf "$CYAN%s$NC\n\n" "  Usage: gwa <branch_name> [local_worktree_path]"
    return 1
  fi

  local branch_name="$1"
  local local_worktree_path="$2"

  # Sanitize branch name for directory creation (if no path provided)
  if [ -z "$local_worktree_path" ]; then
      local_worktree_path=${branch_name//[^a-zA-Z0-9._-]/_}
  fi

  # Must be in the repo that hosts the bare .bare
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    printf "$RED$BOLD%s$NC\n\n" "Aborting: not in a bare git repository."
    return 1
  fi

  # Check if we're in the right directory for creating worktrees
  if [ -f "$(pwd)/.git" ]; then
      # Check if this is a worktree directory (not the parent)
      if grep -q "gitdir: .*/\.bare/worktrees/" "$(pwd)/.git" 2>/dev/null; then
          printf "$RED$BOLD%s$NC\n\n" "Aborting: nested worktrees are not advisable."
          return 1
      fi
  fi

  printf "%s$CYAN$BOLD%s$NC\n" "Branch name: " "$branch_name"
  printf "%s$CYAN$BOLD%s$NC\n" "Worktree path: " "$local_worktree_path"

  # Check if branch exists remotely
  if git ls-remote --heads --quiet origin "$branch_name" | grep -q "refs/heads/$branch_name"; then
    printf "$MAGENTA_BACKGROUND%s$BOLD%s$NC$MAGENTA$BOLD%s$NC\n" "Creating worktree for " "existing remote branch:" " $branch_name"
    # Fetch the canary branch from the remote AND also create the remote tracking branch reference
    git fetch origin "${branch_name}:refs/remotes/origin/${branch_name}"
    git worktree add --track -b "$branch_name" "$local_worktree_path" "origin/$branch_name"
  else
    printf "$MAGENTA_BACKGROUND%s$BOLD%s$NC$MAGENTA$BOLD%s$NC\n" "Creating worktree for " "new branch:" " $branch_name"
    git worktree add -b "$branch_name" "$local_worktree_path"

    # Also create and track the respective remote branch
    printf "$MAGENTA_BACKGROUND%s$BOLD%s$NC$MAGENTA$BOLD%s$NC\n" "Creating and tracking " "remote upstream branch:" " origin/$branch_name"
    git push origin "$branch_name"
    git branch --set-upstream-to="origin/$branch_name" "$branch_name"
  fi

}

# Remove worktree
gwr() {
  if [ $# -eq 0 ]; then
    # Interactive selection with fzf
    local worktree_path
    worktree_path=$(git worktree list --porcelain | grep "^worktree" | cut -d' ' -f2 | grep -v ".bare" | fzf --prompt="Select worktree to remove: ")

    if [ -n "$worktree_path" ]; then
      git worktree remove "$worktree_path"
      printf "%s$CYAN$BOLD%s$NC\n" "Removed worktree: " "$worktree_path"
    fi
  else
    git worktree remove "$1"
    printf "%s$CYAN$BOLD%s$NC\n" "Removed worktree: " "$1"
  fi
    printf "$CYAN%s$NC\n" "  Reminder: the local and remote git branches were NOT deleted"
}

# Switch to worktree directory using fzf
gws() {
  local worktree_path
  worktree_path=$(git worktree list --porcelain | grep "^worktree" | cut -d' ' -f2 | fzf --prompt="Switch to worktree: " --preview "ls -la {}")
  if [ -n "$worktree_path" ]; then
    cd "$worktree_path" || return 1
  fi
}

################################################################################
# Git aliases for regular workflow
################################################################################
# For more fzf + git inspiration checkout: https://junegunn.kr/2016/07/fzf-git/, https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

# Git status with file preview
gsp() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

# Git log with commit preview
gl() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

# Git stash with preview
gstash() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

# Export git stash changes to a patchfile
# source: https://stackoverflow.com/questions/3973034/export-a-stash-to-another-computer
share-stash() {
    STASH_ENTRY=$(gstash)
    git stash show "$STASH_ENTRY" -p > changes.patch
}

# Git branch with commit log preview
_gb() {
  is_in_git_repo || return
  git branch --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:50% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# Is the base branch main or master?
_mb() {
    BRANCHES=$(git branch)
    if [[ $BRANCHES =~ 'main' ]]; then
        echo 'main'
    elif [[ $BRANCHES =~ 'master' ]]; then
        echo 'master'
    elif [[ $BRANCHES =~ 'develop' ]]; then
        echo 'develop'
    else
        echo 'not found'
    fi
}

# Mnemonic: git checkout branch
gcb() {
  git checkout $(_gb)
}

# Mnemonic: git branch delete
gbd() {
  git branch -D $(_gb)
}

# Interactive FZF prompt to remove changes
gc() {
  git checkout $(gsp)
}

# Interactive FZF prompt to stage files
ga() {
  git add $(gsp)
}

# Interactive FZF prompt to stage chunks
gap() {
  git add -p $(gsp)
}

# Interactive FZF prompt to unstage files
gr() {
  git reset $(gsp)
}

# Mnemonic: git stash apply
gsa() {
  git stash apply $(gstash)
}

# Mnemonic: current branch commits
cbcommits() {
  MAIN_BRANCH=$(_mb)
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

  git log origin/"$MAIN_BRANCH".."$CURRENT_BRANCH" --oneline
}

# Mnemonic: Am I behind origin/main?
amibehind() {
  MAIN_BRANCH=$(_mb)
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

  git log "$CURRENT_BRANCH"..origin/"$MAIN_BRANCH" --oneline
}

# What has happened to origin/main since I last pulled? (shows commits)
glmomo() {
  MAIN_BRANCH=$(_mb)

  git log "$MAIN_BRANCH"..origin/"$MAIN_BRANCH" --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%C(cyan)%C(bold)%an%C(auto))" --color=always
}

# What has happened to origin/main since I last pulled? (shows file changes)
gdmomo() {
  MAIN_BRANCH=$(_mb)
  git diff "$MAIN_BRANCH"...origin/"$MAIN_BRANCH" --compact-summary
}

# Show git status
alias gs="git status"

# List local branches
alias gb="git branch"

# Show a compact summary of unstaged changes
alias gdc="git diff --compact-summary"

# Delete all local branches except main/master and the branch I'm currently on
alias gdab='git branch | egrep -v "(master|main|develop|\*)" | xargs git branch -D'

# Fetch
gf() {
    git fetch origin "$(git branch --show-current)"
}

# Fetch and show status
alias gfs="git fetch && git status"

# Pretty log
alias glg="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"

# Diff
alias gd="git diff"
alias gds="git diff --staged"
