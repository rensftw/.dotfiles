local cmp = require('cmp')
local luasnip = require('luasnip')

local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

cmp.setup({
    snippet = {
        expand = function(args)
            luasnip.lsp_expand(args.body)
        end,
    },
    mapping = {
        ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            elseif has_words_before() then
                cmp.complete()
            else
                fallback()
            end
        end, { "i", "s" }),

        ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end, { "i", "s" }),
        ['<Esc>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        ['<C-k>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
        ['<C-j>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
        ['<C-a>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    },
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
    },
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'nvim_lua' },
        { name = 'luasnip' },
        { name = 'buffer' },
        { name = 'path' },
    }),
    formatting = {
        format = function(entry, vim_item)
            vim_item.menu = ({
                nvim_lsp = '„ÄÑ',
                nvim_lua = 'Óò†',
                luasnip  = 'ùì¢',
                buffer   = 'Óòí',
            })[entry.source.name]
            vim_item.kind = ({
                Text          = 'Ôî´',
                Method        = 'Ôûî',
                Function      = 'Ôûî',
                Constructor   = 'Ôê•',
                Field         = 'Óûõ',
                Variable      = 'Óûõ',
                Class         = 'ÔÉ®',
                Interface     = 'Ô∞Æ',
                Module        = 'Ô£ñ',
                Property      = 'Óò§',
                Unit          = 'Ôëµ',
                Value         = 'Ô¢ü',
                Enum          = 'Ôêµ',
                Keyword       = 'Ô†ä',
                Snippet       = 'Ô¨å',
                Color         = 'Óà´',
                File          = 'ÔÖõ',
                Reference     = 'Ôöê',
                Folder        = 'ÔÑï',
                EnumMember    = 'ÔÖù',
                Constant      = 'Óà¨',
                Struct        = 'ÔÉä',
                Event         = 'ÔÉß',
                Operator      = 'Ô¨¶',
                TypeParameter = 'Óòé',
            })[vim_item.kind]
            return vim_item
        end
    },
})

-- Use cmdline & path source for ':'.
cmp.setup.cmdline(':', {
    completion = { autocomplete = false },
    sources = cmp.config.sources({
        { name = 'path' }
    }, {
        { name = 'cmdline' }
    })
})
