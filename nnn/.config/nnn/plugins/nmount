#!/usr/bin/env sh

# Description: Toggle mount status of a device using pmount
#              If the device is not mounted, it will be mounted.
#              If the device is mounted, it will be unmounted and powered down.
#
# Dependencies: lsblk, pmount
#
# Usage: Runs `lsblk` on 'l', exits on 'Return`.
#
# Notes:
#   - The script uses Linux-specific lsblk to list block devices. Alternatives:
#       macOS: "diskutil list"
#       BSD: "geom disk list"
#   - The script uses udisksctl (from udisks2) to power down devices. This is also Linux-specific.
#     Users on non-Linux platforms can comment it and use an alterntive to power-down disks.
#
# Shell: POSIX compliant
# Author: Arun Prakash Jana
# NOTE: Modified for macOS

RED_BACKGROUND=$(tput setab 1; tput setaf 0)
CYAN_BACKGROUND=$(tput setab 6; tput setaf 0)
YELLOW_BACKGROUND=$(tput setab 3; tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

PROMPT() {
    printf "\n$YELLOW_BACKGROUND$BOLD%s$NORMAL\n" "Ensure you aren't still in the mounted drive."
    diskutil list

    printf "$CYAN$BOLD%s$NORMAL " "Disk menu ('l'ist, 'q'uit):"
}

PROMPT
read -r answer

while true
do
    case $answer in
        l)
            options=("/Volumes"/*)
            options=($(printf '%s\n' "${options[@]}" | grep -vw "Macintosh HD"))

            # options=("${options[@]//*Macintosh HD*}") # Filter out "Macintosh HD" from the options
            if [ -z "$options" ]; then
                printf "$RED$BOLD%s$NORMAL\n\n" "✗ No external drives mounted."
                printf "$BOLD%s$NORMAL " "Press any key to continue"
                read -r pause
                exit
            else
                printf "\n$CYAN$BOLD%s$NORMAL\n" "External physical disks:"

                PS3=$(printf "\n$CYAN_BACKGROUND$BOLD%s$NORMAL " "Select a disk:")
                select option in "${options[@]}"; do
                    if [ -n "$option" ]; then
                        if [ "$option" = "/Volumes/Macintosh HD" ]; then
                            printf "$RED$BOLD%s$NORMAL\n" "$option is an internal drive used by the OS. Choose another drive."
                            continue
                        fi

                        DRIVE="${option##*/}" # Extract drive name without the prefix
                        if fd --quiet "$DRIVE" /Volumes; then
                            sync
                            if diskutil unmount "$DRIVE"; then
                                printf "$GREEN$BOLD%s$NORMAL\n" "✔ $DRIVE unmounted."
                                if diskutil eject "$DRIVE"; then
                                    printf "$GREEN$BOLD%s$NORMAL\n\n" "✔ $DRIVE ejected."
                                fi
                            fi
                        else
                            diskutil mount "$DRIVE"
                            printf "$GREEN$BOLD%s$NORMAL\n\n" "✔ $DRIVE mounted to $(lsblk -n /answer/"$DRIVE" | rev | cut -d' ' -f1 | rev)".
                        fi

                        printf "$CYAN$BOLD%s$NORMAL " "Continue? [y/n]"
                        read -r anotherone

                        if [ "$anotherone" = "y" ]; then
                            break
                        else
                            exit
                        fi
                    else
                        printf "$RED$BOLD%s$NORMAL\n\n" "✗ Invalid option. Try again."
                        printf "$BOLD%s$NORMAL " "Try again? [y/n]"
                        read -r tryagain

                        if [ "$tryagain" = "y" ]; then
                            continue
                        else
                            exit
                        fi
                    fi
                done
            fi
            ;;
        q)
            exit
            ;;
    esac

    PROMPT
    read -r answer
done
